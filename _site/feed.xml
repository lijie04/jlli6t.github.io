<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:3080/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:3080/" rel="alternate" type="text/html" /><updated>2023-02-06T15:40:14+10:00</updated><id>http://localhost:3080/feed.xml</id><title type="html">Jie Li (She/Her)</title><subtitle>Passion can outweight the long years &lt;font color=F08F8F&gt;❤&lt;/font&gt; 热爱可抵岁月漫长</subtitle><author><name>Jie Li</name></author><entry><title type="html"></title><link href="http://localhost:3080/2019-07-21-Comparison_of_Seqs_iterator/" rel="alternate" type="text/html" title="" /><published>2023-02-06T15:40:14+10:00</published><updated>2023-02-06T15:40:14+10:00</updated><id>http://localhost:3080/2019-07-21-Comparison_of_Seqs_iterator</id><content type="html" xml:base="http://localhost:3080/2019-07-21-Comparison_of_Seqs_iterator/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>做生物数据的分析，处理序列就像日常操作。而更快速的序列迭代，就像打游戏时开了外挂。
需要对fastq文件序列进行频繁的抽调，数据量大的时候，时间成本成指数增长。翻了翻文档，<code class="language-plaintext highlighter-rouge">Biopython</code>除了提供<code class="language-plaintext highlighter-rouge">Bio.seqIO.parse</code>函数解析文件之外，其实还提供了一种更底层的写法，可以成N倍的提高读文件的速度，我没有具体去计算会快多少倍（因为等不及了，kill掉了进程），目测的话，快几十倍是不成问题的。</p>

<!--more-->

<p><code class="language-plaintext highlighter-rouge">Bio.SeqIO.QualityIO.FastqGeneralIterator</code>同<code class="language-plaintext highlighter-rouge">Bio.SeqIO.parse</code>一样也是一个迭代器，只不过不生成对象<code class="language-plaintext highlighter-rouge">record</code>，而是生成序列id、序列、以及质量值本身，遍历的时候调用语法为</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">For</span> <span class="n">title</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">qual</span> <span class="ow">in</span> <span class="n">FastqGeneralIterator</span><span class="p">(</span><span class="n">fh</span><span class="p">):</span>
	<span class="n">Do</span> <span class="n">something</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">FastqGeneralIterator</code>速度很快了，但我偶然又看到大神Heng Li 12年写的一个小代码<code class="language-plaintext highlighter-rouge">readfq</code>，相信不少同学有看过源码（我看到不少项目都嵌了这段代码），也是一个序列遍历器，且居然还在活跃，还有人在提issue和pr。</p>

<p>测试文件为一个<code class="language-plaintext highlighter-rouge">36,518,870</code>条序列的fastq.gz文件，这个序列数量已经是人肠道微生物基因集的几倍了，大多数情况下都不会需要频繁迭代这么多的序列量。我测试迭代然后统计序列数，碱基数，及质量字符数。
考虑到服务器上其他用户的状态可能也会影响测试效果，所以做了多次测试，<code class="language-plaintext highlighter-rouge">Bio</code>版本为<code class="language-plaintext highlighter-rouge">1.76</code>，测试平台为<code class="language-plaintext highlighter-rouge">x86_64 GNU/Linux</code>：</p>

<p>通过5次单独的测试，总的来说<code class="language-plaintext highlighter-rouge">readfq</code>速度上比<code class="language-plaintext highlighter-rouge">Bio</code>慢一点点，不会超过<code class="language-plaintext highlighter-rouge">20%</code>，其中第四次测试<code class="language-plaintext highlighter-rouge">readfq</code>的速度超过了<code class="language-plaintext highlighter-rouge">Bio</code>，可能测试环境也有一定的影响。
强推大神代码的原因：
	1. 代码非常简洁，仅仅31行！相比于Bio来说，非常轻量。
	2. 大神的代码同时兼容<code class="language-plaintext highlighter-rouge">fasta</code>和<code class="language-plaintext highlighter-rouge">fastq</code>！而<code class="language-plaintext highlighter-rouge">FastqGeneralIterator</code>只能处理<code class="language-plaintext highlighter-rouge">fastq</code>文件，如果要处理<code class="language-plaintext highlighter-rouge">fasta</code>格式的文件的话，需要调用<code class="language-plaintext highlighter-rouge">Bio.SeqIO.FastaIO.SimpleFastaParser</code>
	3. 本着代码的简洁性以及减少对<code class="language-plaintext highlighter-rouge">library</code>的依赖，<code class="language-plaintext highlighter-rouge">readfq</code>胜任。
	4. 最后就是虽然在测试过程中，<code class="language-plaintext highlighter-rouge">Bio</code>略胜一筹，但是现实中大部分的情况我们不需要频繁遍历太大的数据，所以速度上可以认为<code class="language-plaintext highlighter-rouge">readfq</code>与<code class="language-plaintext highlighter-rouge">Bio</code>的<code class="language-plaintext highlighter-rouge">FastqGeneralIterator</code>不相上下。</p>

<p>测试代码：</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="s">'start readfq'</span><span class="p">,</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>
<span class="n">n</span><span class="p">,</span> <span class="n">slen</span><span class="p">,</span> <span class="n">qlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">qual</span> <span class="ow">in</span> <span class="n">readfq</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
	<span class="n">n</span><span class="o">+=</span> <span class="mi">1</span>
	<span class="n">slen</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
	<span class="n">qlen</span> <span class="o">+=</span> <span class="n">qual</span>
	<span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">slen</span><span class="p">,</span> <span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">qlen</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'end readfq'</span><span class="p">,</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">'start Bio'</span><span class="p">,</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>
<span class="n">n</span><span class="p">,</span> <span class="n">slen</span><span class="p">,</span> <span class="n">qlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">qual</span> <span class="ow">in</span> <span class="n">FastqGeneralIterator</span><span class="p">(</span><span class="n">fh</span><span class="p">):</span>
	<span class="n">n</span><span class="o">+=</span><span class="mi">1</span>
	<span class="n">slen</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
	<span class="n">qlen</span> <span class="o">+=</span> <span class="n">qual</span>
<span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">slen</span><span class="p">,</span> <span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">qlen</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'end Bio'</span><span class="p">,</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span></code></pre></figure>

<h2 id="附上测试结果供参考">附上测试结果供参考：</h2>
<p><strong>第一次测试</strong>: <code class="language-plaintext highlighter-rouge">readfq</code>比<code class="language-plaintext highlighter-rouge">Bio</code>: <strong>118.88%</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">start</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">10</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mf">13.063023</span>
<span class="n">end</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">10</span><span class="p">:</span><span class="mi">51</span><span class="p">:</span><span class="mf">32.138950</span>
<span class="n">readfq用时</span><span class="err">：</span><span class="mf">259.075927</span><span class="n">s</span>
<span class="n">start</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">10</span><span class="p">:</span><span class="mi">51</span><span class="p">:</span><span class="mf">35.854583</span>
<span class="n">end</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">10</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span><span class="mf">13.789172</span>
<span class="n">Bio用时</span><span class="err">：</span><span class="mf">217.934589</span><span class="n">s</span></code></pre></figure>

<p><strong>第二次测试</strong>: <code class="language-plaintext highlighter-rouge">readfq</code>比<code class="language-plaintext highlighter-rouge">Bio</code>: <strong>118.62%</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">start</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">10</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span><span class="mf">58.999203</span>
<span class="n">end</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mf">06.315406</span>
<span class="n">readfq用时</span><span class="err">：</span><span class="mf">247.316203</span><span class="n">s</span>
<span class="n">start</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mf">08.641087</span>
<span class="n">end</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">37.140562</span>
<span class="n">Bio用时</span><span class="err">：</span><span class="mf">208.499475</span><span class="n">s</span></code></pre></figure>

<p><strong>第三次测试</strong>: <code class="language-plaintext highlighter-rouge">readfq</code>比<code class="language-plaintext highlighter-rouge">Bio</code>: <strong>15.51%</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">start</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">05</span><span class="p">:</span><span class="mf">28.903198</span>
<span class="n">end</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">09</span><span class="p">:</span><span class="mf">53.790852</span>
<span class="n">readfq用时</span><span class="err">：</span><span class="mf">264.887654</span><span class="n">s</span>
<span class="n">start</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">09</span><span class="p">:</span><span class="mf">53.912627</span>
<span class="n">end</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">13</span><span class="p">:</span><span class="mf">43.230618</span>
<span class="n">Bio用时</span><span class="err">：</span><span class="mf">229.317991</span><span class="n">s</span></code></pre></figure>

<p><strong>第四次测试</strong>: <code class="language-plaintext highlighter-rouge">readfq</code>比<code class="language-plaintext highlighter-rouge">Bio</code>: <strong>96.91%</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">start</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">13</span><span class="p">:</span><span class="mf">52.750406</span>
<span class="n">end</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mf">23.449189</span>
<span class="n">readfq用时</span><span class="err">：</span><span class="mf">270.698783</span><span class="n">s</span>
<span class="n">start</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mf">23.554306</span>
<span class="n">end</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.897335</span>
<span class="n">Bio用时</span><span class="err">：</span><span class="mf">279.343029</span><span class="n">s</span></code></pre></figure>

<p><strong>第五次测试</strong>: <code class="language-plaintext highlighter-rouge">readfq</code>比<code class="language-plaintext highlighter-rouge">Bio</code>: <strong>116.17%</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">start</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mf">57.625076</span>
<span class="n">end</span> <span class="n">readfq</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="p">:</span><span class="mf">58.973375</span>
<span class="n">readfq用时</span><span class="err">：</span><span class="mf">241.348299</span><span class="n">s</span>
<span class="n">start</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="p">:</span><span class="mf">59.101057</span>
<span class="n">end</span> <span class="n">Bio</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">23</span> <span class="mi">11</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span><span class="mf">26.855097</span>
<span class="n">Bio用时</span><span class="err">：</span><span class="mf">207.754040</span><span class="n">s</span></code></pre></figure>

<h2 id="附大神代码地址">附大神代码地址</h2>
<p><a href="https://github.com/lh3/readfq/blob/master/readfq.py">地址</a></p>]]></content><author><name>Jie Li</name></author></entry><entry><title type="html">Smith Waterman alignment DP</title><link href="http://localhost:3080/statistics/alignment/Smith-Waterman_algorithm/" rel="alternate" type="text/html" title="Smith Waterman alignment DP" /><published>2023-02-05T00:00:00+10:00</published><updated>2023-02-05T00:00:00+10:00</updated><id>http://localhost:3080/statistics/alignment/Smith%E2%80%93Waterman_algorithm</id><content type="html" xml:base="http://localhost:3080/statistics/alignment/Smith-Waterman_algorithm/"><![CDATA[<p><img src="/assets/picbed/statistics/Smith%E2%80%93Waterman_algorithm1.jpg" alt="" /></p>

<p><br /></p>

<p><img src="/assets/picbed/statistics/Smith%E2%80%93Waterman_algorithm2.jpg" alt="" /></p>]]></content><author><name>Jie Li</name></author><category term="statistics" /><category term="alignment" /><category term="alignment" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Needleman Wunsch alignment DP</title><link href="http://localhost:3080/statistics/alignment/Needleman_Wunsch_alignment/" rel="alternate" type="text/html" title="Needleman Wunsch alignment DP" /><published>2023-02-04T00:00:00+10:00</published><updated>2023-02-04T00:00:00+10:00</updated><id>http://localhost:3080/statistics/alignment/Needleman_Wunsch_alignment</id><content type="html" xml:base="http://localhost:3080/statistics/alignment/Needleman_Wunsch_alignment/"><![CDATA[<p><img src="/assets/picbed/statistics/Needleman%E2%80%93Wunsch_algorithm1.jpg" alt="" /></p>

<p><br /></p>

<p><img src="/assets/picbed/statistics/Needleman%E2%80%93Wunsch_algorithm2.jpg" alt="" /></p>]]></content><author><name>Jie Li</name></author><category term="statistics" /><category term="alignment" /><category term="alignment" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">pmoA基因序列数据库</title><link href="http://localhost:3080/database/gene/pmoA_database/" rel="alternate" type="text/html" title="pmoA基因序列数据库" /><published>2023-02-02T00:00:00+10:00</published><updated>2023-02-02T00:00:00+10:00</updated><id>http://localhost:3080/database/gene/pmoA_database</id><content type="html" xml:base="http://localhost:3080/database/gene/pmoA_database/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>想找pmoA的序列构建数据库，找到了这个<a href="https://dataservices.gfz-potsdam.de/panmetaworks/showshort.php?id=escidoc:1423157">网站</a>. 	里边包括核酸序列，以及序列对应的tax的信息。</p>]]></content><author><name>Jie Li</name></author><category term="database" /><category term="gene" /><category term="protein" /><category term="gene" /><summary type="html"><![CDATA[Introduction 想找pmoA的序列构建数据库，找到了这个网站. 里边包括核酸序列，以及序列对应的tax的信息。]]></summary></entry><entry><title type="html">markdown tutorial</title><link href="http://localhost:3080/tutorial/git/markdown-tutorial/" rel="alternate" type="text/html" title="markdown tutorial" /><published>2022-02-09T00:00:00+10:00</published><updated>2022-03-23T02:04:00+10:00</updated><id>http://localhost:3080/tutorial/git/markdown-tutorial</id><content type="html" xml:base="http://localhost:3080/tutorial/git/markdown-tutorial/"><![CDATA[<p><strong>Howdy!</strong> This is an example blog post that shows several types of HTML content supported in this theme.</p>

<p>Cum sociis natoque penatibus et magnis <a href="#">dis parturient montes</a>, nascetur ridiculus mus. <em>Aenean eu leo quam.</em> Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.</p>

<!--more-->

<blockquote>
  <p>Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
</blockquote>

<p>Etiam porta <strong>sem malesuada magna</strong> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.</p>

<ul id="markdown-toc">
  <li><a href="#inline-html-elements" id="markdown-toc-inline-html-elements">Inline HTML elements</a></li>
  <li><a href="#footnotes" id="markdown-toc-footnotes">Footnotes</a></li>
  <li><a href="#heading" id="markdown-toc-heading">Heading</a>    <ul>
      <li><a href="#code" id="markdown-toc-code">Code</a></li>
      <li><a href="#lists" id="markdown-toc-lists">Lists</a></li>
      <li><a href="#images" id="markdown-toc-images">Images</a></li>
      <li><a href="#tables" id="markdown-toc-tables">Tables</a></li>
    </ul>
  </li>
  <li><a href="#rendering-math" id="markdown-toc-rendering-math">Rendering Math</a></li>
</ul>

<h2 id="inline-html-elements">Inline HTML elements</h2>

<p>HTML defines a long list of available inline tags, a complete list of which can be found on the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">Mozilla Developer Network</a>.</p>

<ul>
  <li><strong>To bold text</strong>, use <code class="language-plaintext highlighter-rouge">&lt;strong&gt;</code>.</li>
  <li><em>To italicize text</em>, use <code class="language-plaintext highlighter-rouge">&lt;em&gt;</code>.</li>
  <li><mark>To highlight</mark>, use <code class="language-plaintext highlighter-rouge">&lt;mark&gt;</code>.</li>
  <li>Abbreviations, like <abbr title="HyperText Markup Langage">HTML</abbr> should use <code class="language-plaintext highlighter-rouge">&lt;abbr&gt;</code>, with an optional <code class="language-plaintext highlighter-rouge">title</code> attribute for the full phrase.</li>
  <li>Citations, like <cite>— Mark Otto</cite>, should use <code class="language-plaintext highlighter-rouge">&lt;cite&gt;</code>.</li>
  <li><del>Deleted</del> text should use <code class="language-plaintext highlighter-rouge">&lt;del&gt;</code> and <ins>inserted</ins> text should use <code class="language-plaintext highlighter-rouge">&lt;ins&gt;</code>.</li>
  <li>Superscript <sup>text</sup> uses <code class="language-plaintext highlighter-rouge">&lt;sup&gt;</code> and subscript <sub>text</sub> uses <code class="language-plaintext highlighter-rouge">&lt;sub&gt;</code>.</li>
</ul>

<p>Most of these elements are styled by browsers with few modifications on our part.</p>

<h2 id="footnotes">Footnotes</h2>

<p>Footnotes are supported as part of the Markdown syntax. Here’s one in action. Clicking this number<sup id="fnref:fn-sample_footnote" role="doc-noteref"><a href="#fn:fn-sample_footnote" class="footnote" rel="footnote">1</a></sup> will lead you to a footnote. The syntax looks like:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Clicking this number[^fn-sample_footnote]</code></pre></figure>

<p>Each footnote needs the <code class="language-plaintext highlighter-rouge">^fn-</code> prefix and a unique ID to be referenced for the footnoted content. The syntax for that list looks something like this:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">[^fn-sample_footnote]: Handy! Now click the return link to go back.</code></pre></figure>

<p>You can place the footnoted content wherever you like. Markdown parsers should properly place it at the bottom of the post.</p>

<h2 id="heading">Heading</h2>

<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>

<h3 id="code">Code</h3>

<p>Inline code is available with the <code class="language-plaintext highlighter-rouge">&lt;code&gt;</code> element. Snippets of multiple lines of code are supported through Rouge. Longer lines will automatically scroll horizontally when needed. You may also use code fencing (triple backticks) for rendering code.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Example can be run directly in your JavaScript console</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Call the function</span>
<span class="nx">adder</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="c1">// &gt; 8</span></code></pre></figure>

<p>You may also optionally show code snippets with line numbers. Add <code class="language-plaintext highlighter-rouge">linenos</code> to the Rouge tags.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="c1">// Example can be run directly in your JavaScript console</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Call the function</span>
<span class="nx">adder</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="c1">// &gt; 8</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.</p>

<h3 id="lists">Lists</h3>

<p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>

<ul>
  <li>Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</li>
  <li>Donec id elit non mi porta gravida at eget metus.</li>
  <li>Nulla vitae elit libero, a pharetra augue.</li>
</ul>

<p>Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.</p>

<ol>
  <li>Vestibulum id ligula porta felis euismod semper.</li>
  <li>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</li>
  <li>Maecenas sed diam eget risus varius blandit sit amet non magna.</li>
</ol>

<p>Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.</p>

<dl>
  <dt>HyperText Markup Language (HTML)</dt>
  <dd>The language used to describe and define the content of a Web page</dd>

  <dt>Cascading Style Sheets (CSS)</dt>
  <dd>Used to describe the appearance of Web content</dd>

  <dt>JavaScript (JS)</dt>
  <dd>The programming language used to build advanced Web sites and applications</dd>
</dl>

<p>Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.</p>

<h3 id="images">Images</h3>

<p>Quisque consequat sapien eget quam rhoncus, sit amet laoreet diam tempus. Aliquam aliquam metus erat, a pulvinar turpis suscipit at.</p>

<p><img src="http://via.placeholder.com/800x400" alt="placeholder" title="Large example image" />
<img src="http://via.placeholder.com/400x200" alt="placeholder" title="Medium example image" />
<img src="http://via.placeholder.com/200x200" alt="placeholder" title="Small example image" /></p>

<h3 id="tables">Tables</h3>

<p>Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Upvotes</th>
      <th>Downvotes</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td>Totals</td>
      <td>21</td>
      <td>23</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>Alice</td>
      <td>10</td>
      <td>11</td>
    </tr>
    <tr>
      <td>Bob</td>
      <td>4</td>
      <td>3</td>
    </tr>
    <tr>
      <td>Charlie</td>
      <td>7</td>
      <td>9</td>
    </tr>
  </tbody>
</table>

<p>Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.</p>

<h2 id="rendering-math">Rendering Math</h2>

<p>Schrodinger’s equation:</p>

\[i \hbar \frac{\partial}{\partial t}\Psi(\mathbf{r},t) = \hat H \Psi(\mathbf{r},t)\]

<hr />

<p>Want to see something else added? <a href="https://github.com/vfvong/jekyll-theme-tao/issues/new">Open an issue.</a></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:fn-sample_footnote" role="doc-endnote">
      <p>Handy! Now click the return link to go back. <a href="#fnref:fn-sample_footnote" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Jie Li</name></author><category term="tutorial" /><category term="git" /><category term="markdown" /><category term="tutorials" /><summary type="html"><![CDATA[Howdy! This is an example blog post that shows several types of HTML content supported in this theme. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.]]></summary></entry><entry><title type="html">sratoolkit下载测序数据</title><link href="http://localhost:3080/linux/bash/sratoolkit/" rel="alternate" type="text/html" title="sratoolkit下载测序数据" /><published>2021-10-29T00:00:00+10:00</published><updated>2021-10-29T00:00:00+10:00</updated><id>http://localhost:3080/linux/bash/sratoolkit</id><content type="html" xml:base="http://localhost:3080/linux/bash/sratoolkit/"><![CDATA[<h2 id="说明">说明</h2>
<p><code class="language-plaintext highlighter-rouge">sratoolkit</code>默认配置的下载数据目录是在<code class="language-plaintext highlighter-rouge">HOME</code>，这显然是不友好的，因为一般的集群给每个<code class="language-plaintext highlighter-rouge">account</code>的<code class="language-plaintext highlighter-rouge">HOME</code>目录下的存储是非常有限的，例如50Gb，所以最好把<code class="language-plaintext highlighter-rouge">cache</code>的目录设置到拥有大量存储可供写入的目录。</p>

<!--more-->

<p>具体操作方式：更改文件 <code class="language-plaintext highlighter-rouge">.ncbi/user-settings.mkfg</code>里的<code class="language-plaintext highlighter-rouge">/repository/user/main/public/root</code>的目录为你想要存放的目录即可。
<img src="/assets/picbed/post/sratoolkit_path_set.png" alt="" /></p>]]></content><author><name>Jie Li</name></author><category term="linux" /><category term="bash" /><category term="bash" /><category term="linux" /><summary type="html"><![CDATA[说明 sratoolkit默认配置的下载数据目录是在HOME，这显然是不友好的，因为一般的集群给每个account的HOME目录下的存储是非常有限的，例如50Gb，所以最好把cache的目录设置到拥有大量存储可供写入的目录。]]></summary></entry><entry><title type="html">上传数据到SRA</title><link href="http://localhost:3080/linux/bash/Upload_SRA/" rel="alternate" type="text/html" title="上传数据到SRA" /><published>2021-01-01T00:00:00+10:00</published><updated>2021-01-01T00:00:00+10:00</updated><id>http://localhost:3080/linux/bash/Upload_SRA</id><content type="html" xml:base="http://localhost:3080/linux/bash/Upload_SRA/"><![CDATA[<h2 id="说明">说明</h2>
<p>数据分析结束之后，通常需要将原始数据上传到公共数据库进行分享。例如测序数据通常上传至NCBI的SRA库。当样本数目比较小的时候，通过网页上传是非常方便的。但是当样本数量庞大的时候，通过网页上传数据就非常麻烦了，因为需要手动依次上传每一个样本。所以最直接的方法是从服务器往NCBI传，例如是用<code class="language-plaintext highlighter-rouge">aspera</code>：</p>

<!--more-->

<p><code class="language-plaintext highlighter-rouge">aspera</code>的下载链接<code class="language-plaintext highlighter-rouge">https://www.ibm.com/products/aspera/downloads</code>
其安装操作手册可参考<code class="language-plaintext highlighter-rouge">https://cloud.tencent.com/developer/article/1749467</code></p>

<h2 id="上传的命令为">上传的命令为：</h2>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ascp <span class="nt">-i</span> /home/.aspera/connect/aspera.openssh <span class="nt">-QT</span> <span class="nt">-l100m</span> <span class="nt">-k1</span> <span class="nt">-d</span> DATA_PATH subasp@upload.ncbi.nlm.nih.gov:uploads/ACCOUNT_CODE</code></pre></figure>

<h2 id="其他">其他</h2>
<p>这个命令应该是默认传到了root目录。此目录是一个暂存目录，时间为30天。30天过后自动移除文件。因此，整个数据submission的操作需要在30天之内完成。</p>]]></content><author><name>Jie Li</name></author><category term="linux" /><category term="bash" /><category term="bash" /><category term="linux" /><summary type="html"><![CDATA[说明 数据分析结束之后，通常需要将原始数据上传到公共数据库进行分享。例如测序数据通常上传至NCBI的SRA库。当样本数目比较小的时候，通过网页上传是非常方便的。但是当样本数量庞大的时候，通过网页上传数据就非常麻烦了，因为需要手动依次上传每一个样本。所以最直接的方法是从服务器往NCBI传，例如是用aspera：]]></summary></entry><entry><title type="html">little treehouse collection - estimation</title><link href="http://localhost:3080/statistics/estimation/Little_treehouse_collection/" rel="alternate" type="text/html" title="little treehouse collection - estimation" /><published>2020-09-10T00:00:00+10:00</published><updated>2020-09-10T00:00:00+10:00</updated><id>http://localhost:3080/statistics/estimation/Little_treehouse_collection</id><content type="html" xml:base="http://localhost:3080/statistics/estimation/Little_treehouse_collection/"><![CDATA[<h3 id="1-introduction">1. Introduction</h3>
<p>Recently, Coles launched a membership campaign. One credit will be issued for every $30 spent at Coles. Where one credit can be redeemed for one LITTLE TREEHOUSE book. The whole book set consists of 24 tiny books (number 1-24, It looks like something in the picture below).</p>

<!--more-->

<p>However, every redeemed book is <strong>wrapped with cover</strong>, thus, you won’t be able to know which number you get until you uncover it.
<img src="/assets/picbed/post/little_treehouse.png" alt="photo" /></p>

<p>I am curious about roughly how much you gonna spend at Coles to collect a full set of LITTLE TREEHOUSE book (a single transaction of $30 or more but less than $60 is calculated as $30).</p>

<h3 id="preparation">Preparation</h3>
<p>Hypothesis: Same quantity of each book was packed and evenly mixed. Books redeemed for every $30 are independent from each other.</p>

<p>Randomly generated 1,000,000 numbers between 0 and 9 as an array. For example:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">1, 3, 1, 4, 0, 0, 5, 3, 0, 6, 7, 8, 4, 6, 3, 2, 6, 6, 4, 1, 0, 2, 5, 5, 6, 2, 2, 7, 9, 1, 6, 3, 5, 9, 6, 4, 4, 9, 7, 1, 3, 1, 3, 3, 4, 9, 5, 7, 8, 7, 4, 9, 6, 8, 6, 2, 8, 8, 5, 2, 8, 9, 5, 4, 6, 0, 8, 4, 1, 1, 0, 4, 7, 5, 6, 7, 8, 7, 2, 1, 7, 2, 0, 4, 5, 1, 6, 0, 7, 3, 6, 9, 9, 0, 7, 8, 8, 3, 4, 9, 9, 0, 0, 3, 5, 0, 6, 8, 0, 8, 4, 3, 1, 2, 5, 1, 4, 6, 7, 1, 7, 0, 8, 3, 3, 3, 1, 4, 8, 8, 5, 7, 3, 4, 5, 6, 2, 2, 6, 1, 9, 9, 0, 9, 4, 4, 4, 7, 1, 8, 8, 4, 9, 7, 5, 5, 6, 7, 1, 0, 2, 3, 4, 0, 6, 4, 4, 7, 8, 9, 7, 6, 7, 5, 5, 4, 6, 0, 0, 4, 0, 4, 9, 1, 7, 4, 4, 1, 8, 3, 7, 1, 2, 3, 8, 4, 6, 1, 5, 5, 5, 1, 9, 2, 5, 6, 1, 6, 0, 9, 5, 3, 7, 7, 4, 5, 4, 9, 0, 7, 9, 1, 0, 4, 7, 1, 1, 5, 8, 8, 9, 2, 8, 2, 9, 0, 8, 3, 0, 4, 0, 3, 2, 3, 4, 7, 9, 5, 0, 8, 0, 0, 0, 4, 0, 1, 5, 5, 9, 7, 9, 2, 3, 4, 1, 3, 0, 4, 0, 4, 3, 7, 7, 6, 6, 5, 7, 1, 1, 3, 9, 0, 7, 3, 1, 5, 7, 3, 3, 8, 8, 3, 0, 0, 4, 1, 0, 8, 9, 3, 3, 3, 9, 6, 0, 5, 0, 8, 7, 1, 5, 1, 3, 3, 7, 7, 0, 7, 6, 4, 6, 8, 5, 2, 5, 0, 1, 1, 7, 0, 1, 3, 4, 5, 4, 3, 1, 0, 9, 8, 8, 4, 2, 1, 7, 9, 5, 9, 9, 6, 4, 9, 5, 6, 8, 6, 3, 8, 8, 7, 8, 6, 7, 3, 2, 0, 2, 0, 5, 8, 3, 7, 8, 1, 4, 2, 9, 6, 5, 6, 9, 5, 9, 1, 5, 5, 1, 2, 7, 5, 1, 1, 6, 6, 9, 7, 0, 6, 3, 2, 3, 3, 4, 0, 3, 2, 0, 0, 8, 3, 7, 6, 7, 7, 9, 2, 3, 2, 4, 6, 5, 9, 4, 7, 9, 4, 0, 2, 6, 4, 9, 5, 0, 0, 4, 3, 3, 9, 8, 4, 7, 4, 8, 3, 3, 6, 2, 9, 6, 3, 0, 0, 7, 8, 1, 0, 9, 3, 3, 6, 3, 6, 2, 6, 6, 7, 6, 3, 8, 9, 2, 5, 0, 2, 4, 0, 2, 7, 3, 9, 2, 7, 1, 7, 8, 8, 0, 7, 8, 3, 0, 3, 2, 6, 2, 2, 9, 5, 1, 7, 4, 2, 0, 0, 5, 3, 1, 9, 0, 3, 3, 5, 4, 4, 2, 1, 9, 4, 0, 9, 0, 1, 2, 0, 8, 3, 6, 6, 0, 5, 2, 1, 2, 6, 8, 2, 9, 3, 8, 4, 9, 1, 5, 2, 1, 1, 2, 2, 3, 5, 4, 0, 2, 9, 5, 2, 8, 7, 8, 5, 9, 4, 2, 2, 3, 1, 5, 6, 3, 4, 0, 5, 0, 5, 0, 3, 3, 9, 8, 6, 9, 1, 6, 1, 8, 4, 9, 9, 6, 4, 1, 8, 2, 4, 0, 0, 4, 5, 8, 7, 2, 8, 5, 1, 1, 5, 0, 2, 8, 9, 7, 3, 1, 2, 1, 0, 5, 2, 3, 7, 3, 6, 0, 3, 5, 8, 7, 7, 4, 9, 9, 4, 3, 1, 8, 4, 6, 2, 3, 9, 3, 5, 2, 1, 9, 1, 2, 1, 4, 8, 9, 3, 8, 1, 5, 2, 7, 1, 7, 8, 2, 9, 6, 8, 8, 7, 2, 3, 9, 0, 5, 7, 0, 6, 1, 8, 2, 1, 5, 0, 3, 1, 9, 4, 8, 6, 9, 1, 6, 7, 0, 4, 6, 8, 4, 6, 8, 7, 9, 4, 1, 9, 4, 9, 6, 9, 5, 2, 9, 9, 2, 2, 3, 8, 2, 8, 6, 7, 6, 2, 9, 6, 3, 0, 8, 4, 2, 6, 5, 5, 4, 1, 4, 4, 3, 9, 8, 9, 9, 2, 4, 7, 3, 4, 0, 2, 0, 4, 7, 2, 7, 9, 1, 5, 3, 5, 5, 4, 7, 4, 1, 9, 9, 5, 1, 6, 7, 3, 5, 4, 6, 0, 9, 3, 4, 4, 2, 9, 0, 9, 6, 5, 5, 7, 1, 5, 4, 9, 1, 0, 7, 0, 8, 6, 9, 4, 5, 7, 1, 0, 7, 3, 9, 1, 4, 0, 3, 6, 1, 9, 9, 6, 7, 1, 1, 3, 7, 1, 8, 5, 7, 9, 2, 2, 6, 8, 3, 9, 1, 0, 1, 4, 9, 1, 1, 6, 0, 6, 3, 0, 4, 4, 6, 1, 6, 5, 5, 5, 2, 0, 2, 8, 6, 5, 9, 8, 6, 0, 4, 9, 5, 7, 2, 5, 7, 1, 6, 6, 6, 5, 5, 9, 5, 4, 0, 8, 1, 7, 1, 2, 9, 4, 9, 3, 6, 8, 7, 0, 0, 4, 1, 5, 9, 8, 8, 7, 5, 3, 3, 4, 8, 3, 9, 2, 1, 3, 1, 2, 4, 4</code></pre></figure>

<h3 id="experiment">Experiment</h3>
<p>Sampling from left to right from this array, take two numbers at a time as a combination. Skip combinations of <code class="language-plaintext highlighter-rouge">00</code> or larger than <code class="language-plaintext highlighter-rouge">24</code>. Repeating the process until <code class="language-plaintext highlighter-rouge">24</code> different numbers are collected.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">mean: 88.9</code></pre></figure>

<h3 id="conclusion">Conclusion</h3>
<p><code class="language-plaintext highlighter-rouge">$30 * 89 = $2670</code>, theoretically, I may need spend $2670 to collect the full set of LITTLE TREEHOUSE book.</p>

<p>After 1,000 independent trials, this value converges to a number close to $2670.</p>

<p>Thus, I decided to give up collecting those books…</p>]]></content><author><name>Jie Li</name></author><category term="statistics" /><category term="estimation" /><category term="estimation" /><summary type="html"><![CDATA[1. Introduction Recently, Coles launched a membership campaign. One credit will be issued for every $30 spent at Coles. Where one credit can be redeemed for one LITTLE TREEHOUSE book. The whole book set consists of 24 tiny books (number 1-24, It looks like something in the picture below).]]></summary></entry><entry><title type="html">5S rRNA 数据库</title><link href="http://localhost:3080/database/rrna/5S_rRNA/" rel="alternate" type="text/html" title="5S rRNA 数据库" /><published>2020-06-29T00:00:00+10:00</published><updated>2020-06-29T00:00:00+10:00</updated><id>http://localhost:3080/database/rrna/5S_rRNA</id><content type="html" xml:base="http://localhost:3080/database/rrna/5S_rRNA/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>除了从<code class="language-plaintext highlighter-rouge">NCBI</code>，<code class="language-plaintext highlighter-rouge">Rfam</code>等这样的大库中分离5S rRNA序列之外，发现有人在收集相应的序列：<code class="language-plaintext highlighter-rouge">http://www.combio.pl/rrna/</code>。</p>

<!--more-->

<p>数据库已经在线<code class="language-plaintext highlighter-rouge">13</code>年。目前收录了<code class="language-plaintext highlighter-rouge">11419</code>条序列，包括<code class="language-plaintext highlighter-rouge">7174</code>个不同的物种，版本号<code class="language-plaintext highlighter-rouge">17</code>。</p>

<p><code class="language-plaintext highlighter-rouge">Taxon</code>分类包括<code class="language-plaintext highlighter-rouge">Archaea</code>， <code class="language-plaintext highlighter-rouge">Bacteria</code>， <code class="language-plaintext highlighter-rouge">Eukaryota</code>，<code class="language-plaintext highlighter-rouge">Plastids</code>，和<code class="language-plaintext highlighter-rouge">Mitochondria</code>。</p>]]></content><author><name>Jie Li</name></author><category term="database" /><category term="rRNA" /><category term="rRNA" /><category term="amplicon" /><summary type="html"><![CDATA[Introduction 除了从NCBI，Rfam等这样的大库中分离5S rRNA序列之外，发现有人在收集相应的序列：http://www.combio.pl/rrna/。]]></summary></entry><entry><title type="html">Silva updates to 138</title><link href="http://localhost:3080/database/rrna/Silva_138/" rel="alternate" type="text/html" title="Silva updates to 138" /><published>2020-06-18T00:00:00+10:00</published><updated>2020-06-18T00:00:00+10:00</updated><id>http://localhost:3080/database/rrna/Silva_138</id><content type="html" xml:base="http://localhost:3080/database/rrna/Silva_138/"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>SILVA里使用率最高的，即是它的SSU数据库。当然它在线的比对工具，以及ARB进化相关套装也很受欢迎，不过小编使用最多的是SSU数据库，以及LSU数据库。所以介绍的重点也会偏向于这两个库。</p>

<!--more-->

<p>数据集的快速增长极大的增加了硬件需求，数据库越大，则越需要更多的资源例如内存来加载数据库。目前有两种策略解决此问题：1）升级硬件满足需求。2）减小数据库中的序列数。出于多种原因，只要结果数据集仍然具有<strong>代表性</strong>（这是环境微生物学中的一个非常重要的参数），第二种方法会更具性价比。SILVA项目选择了99% identity作为标准对SSU Ref进行去冗余构建了SSU Ref NR数据集。</p>

<p><strong>这次138版本目前只更新了SSU库</strong>，LSU库还在进行中。taxonomy信息加入了GTDB的分类信息，138以前的版本中还有greengenes数据库的信息。GTDB项目的负责人是昆士兰大学的Prof. Phil Hugenholtz，他同时也参与了greengenes数据库的构建。</p>

<h3 id="简介">简介：</h3>
<p>silva是一个全面的比对的核糖体RNA序列数据的在线资源，由德国Microbial Genomics and Bioinformatics Research Group开发及维护。SILVA提供了三个域（细菌，古菌，真核生物）的对齐的小亚基（16S/18S，SSU）和大亚基（23S/28S，LSU）rRNA序列的全面、质量检查过并定期更新的数据集。且SILVA是软件包ARB的官方数据库。<br />
SSU：核糖体小亚基库，包含了细菌和古菌的16S序列，以及真核生物的18S序列。<br />
LSU：核糖体大亚基库，包含了细菌和古菌的23S序列，以及真核生物的28S序列</p>

<h3 id="文件描述">文件描述：</h3>
<p><strong>_tax_silva.fasta.gz</strong>
SSU和LSU数据库的FASTA序列文件，序列ID中包含了细菌，古菌和真核的taxonomy分类信息。
标注：这些文件里包含的是原始的存储在公共数据库（ENA/GenBank/DDBJ）中的序列，没有对序列进行修剪。<br />
<strong>_tax_silva_full_align_trunc.fasta.gz</strong>
SSU和LSU数据库的FASTA序列文件，序列ID中包含了细菌，古菌和真核的taxonomy分类信息，同时还包含了比对信息。
标注：这些文件里的序列是修剪过的，数据库中没有被比对的序列皆被去除了。<br />
<strong>_tax_silva_trunc.fasta.gz</strong>
SSU和LSU数据库的FASTA序列文件，序列ID中包含了细菌，古菌和真核的taxonomy分类信息。
标注：这些文件里的序列是修剪过的，数据库中没有被比对的序列皆被去除了。</p>

<h3 id="库构建方法">库构建方法：</h3>
<p><strong>SSU Parc库：</strong><br />
包含所有比对identity&gt;=50，比对质量值&gt;=40，碱基对分数或序列质量值&gt;30的序列。Pintail值&lt;50或比对质量值&lt;75的所有序列在ARB中指定为红色。而ALL-&gt;Living Tree Project 或 StrainInfo中的typestrans在ARB中指定为浅蓝色。</p>

<p><strong>SSU Ref库：</strong><br />
细菌和真核生物序列&lt;1200bp，古菌序列&lt;900bp，比对identity&lt;70，或比对质量值&lt;50的序列被去除。而ALL-&gt;Living Tree Project 或 StrainInfo中的typestrans在ARB中指定为浅蓝色。</p>

<p><strong>SSU Ref NR库：</strong><br />
基于最后发行的Ref NR 99版本的数据库里自定义的序列顺序结合序列长度（加权两倍）和质量，以99%的identity标准，来去除高度相似相同的序列。而对于排序，序列的质量由ambiguties（50%），总体比对质量（45%）以及均聚物（5%）进行定义。序列的总体比对质量是根据其比对得分，比对identity，以及比对的百分比（相等的权重）计算得来。已可培养物种的序列在所有的情况下都进行保留。</p>

<p>标注：<strong>138版本的SSU Ref NR 99比之前的版本包含更少的序列</strong>。因为团队把序列比对的工具从USEARCH中整合的UCLUST (1.0.50) 换到VSEARCH (2.13)，提升了聚类的性能，且有望使团队可以在将来提供更稳定的Ref NR库。</p>

<p>Ref NR库减小是由于这两个工具使用不同的序列/比对identity的定义差异导致。团队还使用了第三方工具CD-HIT（v4.8）交叉检查了比对的结果。在使用同样的identity阈值条件下，VSEARCH和CD-HIT返回了相似的聚类簇，而UCLUST返回了<strong>显著更大数目</strong>的聚类簇。</p>]]></content><author><name>Jie Li</name></author><category term="database" /><category term="rRNA" /><category term="tutorial" /><category term="rRNA" /><category term="amplicon" /><summary type="html"><![CDATA[Introduction SILVA里使用率最高的，即是它的SSU数据库。当然它在线的比对工具，以及ARB进化相关套装也很受欢迎，不过小编使用最多的是SSU数据库，以及LSU数据库。所以介绍的重点也会偏向于这两个库。]]></summary></entry></feed>